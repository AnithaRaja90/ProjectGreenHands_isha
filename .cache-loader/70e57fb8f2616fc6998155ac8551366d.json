{"remainingRequest":"/var/www/PGH/aug/projectGH/node_modules/thread-loader/dist/cjs.js??ref--10-2!/var/www/PGH/aug/projectGH/node_modules/ts-loader/index.js??ref--10-3!/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js!/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js!/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/pick-list.component.ts","dependencies":[{"path":"/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/pick-list.component.ts","mtime":1534424811870},{"path":"/var/www/PGH/aug/projectGH/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/var/www/PGH/aug/projectGH/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/var/www/PGH/aug/projectGH/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/var/www/PGH/aug/projectGH/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar pick_list_service_1 = require(\"app/entities/service/pick-list.service\");\nvar pick_list_value_service_1 = require(\"app/entities/service/pick-list-value.service\");\nvar moment = require(\"moment\");\nvar shared_1 = require(\"app/shared\");\nvar pick_list_model_1 = require(\"app/shared/model/pick-list.model\");\nvar pick_list_value_model_1 = require(\"app/shared/model/pick-list-value.model\");\nvar ngx_bootstrap_1 = require(\"ngx-bootstrap\");\nvar PickListComponent = /** @class */ (function () {\n    function PickListComponent(pickListService, pickListValueService) {\n        this.pickListService = pickListService;\n        this.pickListValueService = pickListValueService;\n        this.pickListObject = new pick_list_model_1.PickListModel();\n        this.pickListValueObject = new pick_list_model_1.PickListModel();\n    }\n    PickListComponent.prototype.ngOnInit = function () {\n        this.getPickList();\n        this.getAllPickListValue();\n    };\n    PickListComponent.prototype.getPickList = function () {\n        var _this = this;\n        // Get the list of pickList\n        this.pickListService.query().subscribe(function (res) {\n            _this.pickLists = res.body;\n        });\n    };\n    PickListComponent.prototype.getAllPickListValue = function () {\n        var _this = this;\n        // Get the list of pickListValue\n        this.pickListValueService.query().subscribe(function (res) {\n            _this.pickListValues = res.body;\n        });\n    };\n    PickListComponent.prototype.savePickList = function () {\n        this.pickListObject.updatedAt = moment(this.updatedAt, shared_1.DATE_TIME_FORMAT);\n        if (this.pickListObject.id !== undefined) {\n            this.subscribeToSaveResponse(this.pickListService.update(this.pickListObject));\n        }\n        else {\n            this.pickListObject.createdAt = moment(this.createdAt, shared_1.DATE_TIME_FORMAT);\n            this.subscribeToSaveResponse(this.pickListService.create(this.pickListObject));\n        }\n    };\n    PickListComponent.prototype.subscribeToSaveResponse = function (result) {\n        var _this = this;\n        result.subscribe(function (res) {\n            _this.pickListModal.hide();\n            _this.pickListObject = new pick_list_model_1.PickListModel();\n            alert('Successfully updated the record.');\n            _this.getPickList();\n        }, function (res) {\n            // alert('Not Saved.');\n            alert(res.error.fieldErrors[0].message);\n        });\n    };\n    PickListComponent.prototype.savePickValue = function () {\n        this.pickListValueObject.updatedAt = moment(this.childUpdatedAt, shared_1.DATE_TIME_FORMAT);\n        if (this.pickListValueObject.id !== undefined) {\n            this.subscribeToSaveSubPickListResponse(this.pickListValueService.update(this.pickListValueObject));\n        }\n        else {\n            this.pickListValueObject.createdAt = moment(this.childCreatedAt, shared_1.DATE_TIME_FORMAT);\n            this.subscribeToSaveSubPickListResponse(this.pickListValueService.create(this.pickListValueObject));\n        }\n    };\n    PickListComponent.prototype.subscribeToSaveSubPickListResponse = function (result) {\n        var _this = this;\n        result.subscribe(function (res) {\n            _this.pickListValueModal.hide();\n            _this.pickListValueObject = new pick_list_value_model_1.PickListValueModel();\n            alert('Successfully updated the record.');\n            _this.getAllPickListValue();\n        }, function (res) {\n            // alert('Not Saved.');\n            alert(res.error.fieldErrors[0].message);\n        });\n    };\n    // show model popup to create picklist value\n    PickListComponent.prototype.createPickList = function () {\n        this.pickListModal.show();\n    };\n    // show model popup to create pickListValue\n    PickListComponent.prototype.createPickListValue = function () {\n        this.pickListValueObject = new pick_list_value_model_1.PickListValueModel();\n        this.pickListValueModal.show();\n        console.log(this.pickListValueObject);\n    };\n    // show model popup to update pickList value\n    PickListComponent.prototype.getPickListValue = function (value) {\n        this.pickListModal.show();\n        this.pickListObject = value;\n    };\n    // show model popup to update value\n    PickListComponent.prototype.getPickValue = function (value) {\n        this.pickListValueModal.show();\n        this.pickListValueObject = value;\n    };\n    // delete picklist value\n    PickListComponent.prototype.deletePickList = function (value) {\n        var _this = this;\n        this.pickListService.delete(value.id).subscribe(function (data) {\n            alert('PickList delete Successfully.');\n            _this.pickLists = _this.pickLists.filter(function (u) { return u !== value; });\n        });\n    };\n    // delete picklist value\n    PickListComponent.prototype.deletePickListValue = function (value) {\n        var _this = this;\n        this.pickListValueService.delete(value.id).subscribe(function (data) {\n            alert('PickListValue deleted Successfully.');\n            _this.pickListValues = _this.pickListValues.filter(function (u) { return u !== value; });\n        });\n    };\n    PickListComponent.prototype.openChildModel = function (value) {\n        this.subPickListModal.show();\n        this.pickListValueObject = value;\n    };\n    // Add sub pick list value\n    PickListComponent.prototype.addChild = function (val) {\n        var _this = this;\n        this.pickListValueObject = new pick_list_value_model_1.PickListValueModel();\n        this.pickListValueObject.pickValueId = val.id;\n        this.pickListValueObject.pickListValue = val.subChildValue;\n        this.pickListValueObject.createdAt = moment(this.childCreatedAt, shared_1.DATE_TIME_FORMAT);\n        this.pickListValueObject.updatedAt = moment(this.childUpdatedAt, shared_1.DATE_TIME_FORMAT);\n        this.pickListValueService.create(this.pickListValueObject)\n            .subscribe(function (data) {\n            _this.subPickListModal.hide();\n            alert('Sub PickListValue Created Successfully.');\n            _this.pickListValueObject = new pick_list_value_model_1.PickListValueModel();\n            _this.getAllPickListValue();\n        }, function (res) {\n            alert(res.error.fieldErrors[0].message);\n        });\n    };\n    Object.defineProperty(PickListComponent.prototype, \"pickList\", {\n        set: function (pickListObject) {\n            this.createdAt = moment(this.pickListObject.createdAt).format(shared_1.DATE_TIME_FORMAT);\n            this.updatedAt = moment(this.pickListObject.updatedAt).format(shared_1.DATE_TIME_FORMAT);\n            this.childCreatedAt = moment(this.pickListValueObject.createdAt).format(shared_1.DATE_TIME_FORMAT);\n            this.childUpdatedAt = moment(this.pickListValueObject.updatedAt).format(shared_1.DATE_TIME_FORMAT);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    tslib_1.__decorate([\n        core_1.ViewChild('pickListModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof ngx_bootstrap_1.ModalDirective !== \"undefined\" && ngx_bootstrap_1.ModalDirective) === \"function\" && _a || Object)\n    ], PickListComponent.prototype, \"pickListModal\", void 0);\n    tslib_1.__decorate([\n        core_1.ViewChild('pickListValueModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_b = typeof ngx_bootstrap_1.ModalDirective !== \"undefined\" && ngx_bootstrap_1.ModalDirective) === \"function\" && _b || Object)\n    ], PickListComponent.prototype, \"pickListValueModal\", void 0);\n    tslib_1.__decorate([\n        core_1.ViewChild('subPickListModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_c = typeof ngx_bootstrap_1.ModalDirective !== \"undefined\" && ngx_bootstrap_1.ModalDirective) === \"function\" && _c || Object)\n    ], PickListComponent.prototype, \"subPickListModal\", void 0);\n    PickListComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-picklist',\n            templateUrl: 'pick-list.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_d = typeof pick_list_service_1.PickListService !== \"undefined\" && pick_list_service_1.PickListService) === \"function\" && _d || Object, typeof (_e = typeof pick_list_value_service_1.PickListValueService !== \"undefined\" && pick_list_value_service_1.PickListValueService) === \"function\" && _e || Object])\n    ], PickListComponent);\n    return PickListComponent;\n    var _a, _b, _c, _d, _e;\n}());\nexports.PickListComponent = PickListComponent;\n",{"version":3,"file":"/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/pick-list.component.ts","sourceRoot":"","sources":["/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js!/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js!/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/configuration/pick-list.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { PickListService } from 'app/entities/service/pick-list.service';\nimport { PickListValueService } from 'app/entities/service/pick-list-value.service';\nimport { ActivatedRoute } from '@angular/router';\n\nimport * as moment from 'moment';\nimport { DATE_TIME_FORMAT } from 'app/shared';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { PickListModel, IPickList } from 'app/shared/model/pick-list.model';\nimport { PickListValueModel, IPickListValue } from 'app/shared/model/pick-list-value.model';\nimport { ModalDirective } from 'ngx-bootstrap';\n\n@Component({\n    selector: 'jhi-picklist',\n    templateUrl: 'pick-list.component.html'\n})\nexport class PickListComponent implements OnInit {\n    pickListObject: PickListModel = new PickListModel();\n    pickListValueObject: PickListValueModel = new PickListModel();\n    // create empty array for each service\n    pickLists: IPickList[];\n    pickListValues: IPickListValue[];\n    createdAt: string;\n    updatedAt: string;\n    childCreatedAt: string;\n    childUpdatedAt: string;\n\n    @ViewChild('pickListModal') public pickListModal: ModalDirective;\n    @ViewChild('pickListValueModal') public pickListValueModal: ModalDirective;\n    @ViewChild('subPickListModal') public subPickListModal: ModalDirective;\n\n    constructor(\n        private pickListService: PickListService,\n        private pickListValueService: PickListValueService\n    ) {}\n\n    ngOnInit() {\n        this.getPickList();\n        this.getAllPickListValue();\n    }\n\n    getPickList(): void {\n        // Get the list of pickList\n        this.pickListService.query().subscribe((res: HttpResponse<IPickList[]>) => {\n            this.pickLists = res.body;\n        });\n    }\n\n    getAllPickListValue(): void {\n        // Get the list of pickListValue\n        this.pickListValueService.query().subscribe((res: HttpResponse<IPickListValue[]>) => {\n            this.pickListValues = res.body;\n        });\n    }\n\n    savePickList() {\n        this.pickListObject.updatedAt = moment(this.updatedAt, DATE_TIME_FORMAT);\n        if (this.pickListObject.id !== undefined) {\n            this.subscribeToSaveResponse(this.pickListService.update(this.pickListObject));\n        } else {\n            this.pickListObject.createdAt = moment(this.createdAt, DATE_TIME_FORMAT);\n            this.subscribeToSaveResponse(this.pickListService.create(this.pickListObject));\n        }\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<IPickList>>) {\n        result.subscribe(\n            (res: HttpResponse<IPickList>) => {\n                this.pickListModal.hide();\n                this.pickListObject = new PickListModel();\n                alert('Successfully updated the record.');\n                this.getPickList();\n            },\n            (res: HttpErrorResponse) => {\n                // alert('Not Saved.');\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n    }\n\n    savePickValue() {\n        this.pickListValueObject.updatedAt = moment(this.childUpdatedAt, DATE_TIME_FORMAT);\n        if (this.pickListValueObject.id !== undefined) {\n            this.subscribeToSaveSubPickListResponse(this.pickListValueService.update(this.pickListValueObject));\n        } else {\n            this.pickListValueObject.createdAt = moment(this.childCreatedAt, DATE_TIME_FORMAT);\n            this.subscribeToSaveSubPickListResponse(this.pickListValueService.create(this.pickListValueObject));\n        }\n    }\n\n    private subscribeToSaveSubPickListResponse(result: Observable<HttpResponse<IPickListValue>>) {\n        result.subscribe(\n            (res: HttpResponse<IPickListValue>) => {\n                this.pickListValueModal.hide();\n                this.pickListValueObject = new PickListValueModel();\n                alert('Successfully updated the record.');\n                this.getAllPickListValue();\n            },\n            (res: HttpErrorResponse) => {\n                // alert('Not Saved.');\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n    }\n\n    // show model popup to create picklist value\n    createPickList(): void {\n        this.pickListModal.show();\n    }\n\n    // show model popup to create pickListValue\n    createPickListValue(): void {\n        this.pickListValueObject = new PickListValueModel();\n        this.pickListValueModal.show();\n        console.log(this.pickListValueObject);\n    }\n\n    // show model popup to update pickList value\n    getPickListValue(value: PickListModel): void {\n        this.pickListModal.show();\n        this.pickListObject = value;\n    }\n\n    // show model popup to update value\n    getPickValue(value: PickListValueModel): void {\n        this.pickListValueModal.show();\n        this.pickListValueObject = value;\n    }\n\n    // delete picklist value\n    deletePickList(value: PickListModel): void {\n        this.pickListService.delete(value.id).subscribe(data => {\n            alert('PickList delete Successfully.');\n            this.pickLists = this.pickLists.filter(u => u !== value);\n        });\n    }\n\n    // delete picklist value\n    deletePickListValue(value: PickListValueModel): void {\n        this.pickListValueService.delete(value.id).subscribe(data => {\n            alert('PickListValue deleted Successfully.');\n            this.pickListValues = this.pickListValues.filter(u => u !== value);\n        });\n    }\n\n    openChildModel(value: PickListValueModel): void {\n        this.subPickListModal.show();\n        this.pickListValueObject = value;\n    }\n\n    // Add sub pick list value\n    addChild(val: PickListValueModel): void {\n        this.pickListValueObject = new PickListValueModel();\n        this.pickListValueObject.pickValueId = val.id;\n        this.pickListValueObject.pickListValue = val.subChildValue;\n        this.pickListValueObject.createdAt = moment(this.childCreatedAt, DATE_TIME_FORMAT);\n        this.pickListValueObject.updatedAt = moment(this.childUpdatedAt, DATE_TIME_FORMAT);\n        this.pickListValueService.create(this.pickListValueObject)\n            .subscribe(data => {\n                this.subPickListModal.hide();\n                alert('Sub PickListValue Created Successfully.');\n                this.pickListValueObject = new PickListValueModel();\n                this.getAllPickListValue();\n            },\n            (res: HttpErrorResponse) => {\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n    }\n\n    set pickList(pickListObject: IPickList) {\n        this.createdAt = moment(this.pickListObject.createdAt).format(DATE_TIME_FORMAT);\n        this.updatedAt = moment(this.pickListObject.updatedAt).format(DATE_TIME_FORMAT);\n        this.childCreatedAt = moment(this.pickListValueObject.createdAt).format(DATE_TIME_FORMAT);\n        this.childUpdatedAt = moment(this.pickListValueObject.updatedAt).format(DATE_TIME_FORMAT);\n    }\n}\n"]}]}