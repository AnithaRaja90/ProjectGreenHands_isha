{"remainingRequest":"/var/www/PGH/aug/projectGH/node_modules/thread-loader/dist/cjs.js??ref--10-2!/var/www/PGH/aug/projectGH/node_modules/ts-loader/index.js??ref--10-3!/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js!/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js!/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/batch-management/batchmgnt.component.ts","dependencies":[{"path":"/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/batch-management/batchmgnt.component.ts","mtime":1534574616872},{"path":"/var/www/PGH/aug/projectGH/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/var/www/PGH/aug/projectGH/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/var/www/PGH/aug/projectGH/node_modules/thread-loader/dist/cjs.js","mtime":0},{"path":"/var/www/PGH/aug/projectGH/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar modal_1 = require(\"ngx-bootstrap/modal\");\nvar batch_model_1 = require(\"app/shared/model/batch.model\");\nvar shade_area_model_1 = require(\"app/shared/model/shade-area.model\");\nvar damage_model_1 = require(\"app/shared/model/damage.model\");\nvar zonal_service_1 = require(\"app/entities/service/zonal.service\");\nvar nursery_service_1 = require(\"app/entities/service/nursery.service\");\nvar batch_service_1 = require(\"app/entities/service/batch.service\");\nvar damage_service_1 = require(\"app/entities/service/damage.service\");\nvar pick_list_service_1 = require(\"app/entities/service/pick-list.service\");\nvar pick_list_value_service_1 = require(\"app/entities/service/pick-list-value.service\");\nvar shade_area_service_1 = require(\"app/entities/service/shade-area.service\");\nvar moment = require(\"moment\");\nvar shared_1 = require(\"app/shared\");\nvar sector_service_1 = require(\"app/entities/service/sector.service\");\nvar BatchmgntComponent = /** @class */ (function () {\n    function BatchmgntComponent(router, zonalService, sectorService, nurseryService, pickListService, pickListValueService, batchService, damageService, shadeAreaService) {\n        this.router = router;\n        this.zonalService = zonalService;\n        this.sectorService = sectorService;\n        this.nurseryService = nurseryService;\n        this.pickListService = pickListService;\n        this.pickListValueService = pickListValueService;\n        this.batchService = batchService;\n        this.damageService = damageService;\n        this.shadeAreaService = shadeAreaService;\n        // Create object of each model for create form\n        this.batch = new batch_model_1.BatchModel();\n        this.updateBatchValue = new batch_model_1.BatchModel();\n        this.damage = new damage_model_1.DamageModel();\n        this.shadeArea = new shade_area_model_1.ShadeAreaModel();\n        this.months = shared_1.MONTHS;\n    }\n    BatchmgntComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // console.log(\"Inside Batch Component\");\n        // Get the list of zone\n        this.zonalService.query().subscribe(function (res) {\n            _this.zonals = res.body;\n        });\n        // Get the list of picklist\n        this.pickListService.query().subscribe(function (res) {\n            _this.pickLists = res.body;\n        });\n        // Get the list of batch\n        this.getBatchList();\n    };\n    BatchmgntComponent.prototype.getBatchList = function () {\n        var _this = this;\n        // Get the list of batch\n        this.batchService.query().subscribe(function (res) {\n            _this.batchs = res.body;\n        });\n    };\n    BatchmgntComponent.prototype.getShadeAreaList = function () {\n        var _this = this;\n        // console.log('Indide getShadeAreaList');\n        // Get the list of shade area\n        this.shadeAreaService.query().subscribe(function (res) {\n            _this.shadeAreas = res.body;\n        });\n    };\n    BatchmgntComponent.prototype.getDamageList = function () {\n        var _this = this;\n        // console.log('Indide getDamageList');\n        // Get the list of damage\n        this.damageService.query().subscribe(function (res) {\n            _this.damages = res.body;\n        });\n    };\n    // Get the sector value based on zonal id\n    BatchmgntComponent.prototype.getSector = function (zoneId) {\n        var _this = this;\n        // console.log(zoneId);\n        // Get the list of sector\n        this.sectorService.getSectors(zoneId).subscribe(function (res) {\n            // console.log(res.body);\n            _this.sectors = res.body;\n        });\n    };\n    BatchmgntComponent.prototype.getNursery = function (sectorId) {\n        var _this = this;\n        // this.nurseryService.getSectorNursery(sectorId)\n        // .subscribe( data => {\n        //   this.sectorNurserys = data;\n        // });\n        // Get the list of nursery\n        this.nurseryService.getNurserys(sectorId).subscribe(function (res) {\n            // console.log(res.body);\n            _this.nurserys = res.body;\n        });\n    };\n    BatchmgntComponent.prototype.getVariety = function (id) {\n        var _this = this;\n        this.pickListValueService.getVariety(id).subscribe(function (res) {\n            // console.log(res.body);\n            _this.varietys = res.body;\n        });\n        // this.pickListValueService.getParentList(id)\n        // .subscribe( data => {\n        //   this.variety = data;\n        // });\n    };\n    BatchmgntComponent.prototype.getCategory = function (id) {\n        var _this = this;\n        this.pickListValueService.getCategory(id).subscribe(function (res) {\n            // console.log(res.body);\n            _this.categorys = res.body;\n        });\n        // this.pickListValueService.getChildList(id)\n        // .subscribe( data => {\n        //   this.categorys = data;\n        // });\n    };\n    // Create new Batch\n    BatchmgntComponent.prototype.save = function () {\n        // console.log(this.batch);\n        this.batch.createdAt = moment(this.createdAt, shared_1.DATE_TIME_FORMAT);\n        this.batch.updatedAt = moment(this.updatedAt, shared_1.DATE_TIME_FORMAT);\n        this.batch.sowingDate = moment(this.batch.sowingDate, shared_1.DATE_TIME_FORMAT);\n        // console.log(this.batch);\n        this.subscribeToSaveResponse(this.batchService.create(this.batch));\n    };\n    BatchmgntComponent.prototype.subscribeToSaveResponse = function (result) {\n        var _this = this;\n        result.subscribe(function (res) {\n            _this.batch = new batch_model_1.BatchModel();\n            alert('Batch Created Successfully.');\n            _this.getBatchList();\n        }, function (res) {\n            // alert('Batch Not Saved.');\n            alert(res.error.fieldErrors[0].message);\n        });\n    };\n    // Delete the batch\n    BatchmgntComponent.prototype.deleteBatch = function (batch) {\n        var _this = this;\n        this.batchService.delete(batch.id).subscribe(function (data) {\n            _this.batchs = _this.batchs.filter(function (u) { return u !== batch; });\n            alert('Successfully Deleted.');\n        });\n    };\n    // show model popup to close the batch\n    BatchmgntComponent.prototype.updateBatch = function (value) {\n        this.updateBatchValue = new batch_model_1.BatchModel();\n        this.closeBatchModal.show();\n        this.updateBatchValue = value;\n    };\n    // show model popup to close the batch\n    BatchmgntComponent.prototype.updateDamage = function (value) {\n        this.updateBatchValue = new batch_model_1.BatchModel();\n        // console.log(value);\n        this.damageModal.show();\n        this.updateBatchValue = value;\n        this.updateBatchValue.status = damage_model_1.STATUS_SEEDS;\n    };\n    // show model popup to close the batch\n    BatchmgntComponent.prototype.updateShift = function (value) {\n        this.updateBatchValue = new batch_model_1.BatchModel();\n        // console.log(value);\n        this.shiftBatchModal.show();\n        this.updateBatchValue = value;\n    };\n    // show model popup to close the batch\n    BatchmgntComponent.prototype.updateSeedlingDamage = function (value) {\n        this.updateBatchValue = new batch_model_1.BatchModel();\n        // console.log(value);\n        this.updateBatchValue.id = value.batchId;\n        this.updateBatchValue.status = damage_model_1.STATUS_SEEDLING;\n        this.damageModal.show();\n    };\n    BatchmgntComponent.prototype.closeBatch = function (batch) {\n        this.batch = batch;\n        this.batch.status = -1;\n        this.batch.closedDate = moment(this.batch.closedDate, shared_1.DATE_TIME_FORMAT);\n        this.batchService.update(this.batch)\n            .subscribe(function (data) {\n            alert('Bacth Closed Successfully.');\n        }, function (res) {\n            alert(res.error.fieldErrors[0].message);\n        });\n        this.closeBatchModal.hide();\n    };\n    BatchmgntComponent.prototype.createDamage = function (value) {\n        var _this = this;\n        // this.damage = value;\n        console.log(value);\n        this.damage.batchId = value.id;\n        this.damage.noOfQuantity = value.noOfQuantity;\n        this.damage.date = moment(value.date, shared_1.DATE_TIME_FORMAT);\n        this.damage.description = value.description;\n        this.damage.status = value.status;\n        // console.log(this.damage);\n        this.damageService.create(this.damage)\n            .subscribe(function (data) {\n            alert('Damage Created Successfully.');\n            _this.getBatchList();\n        }, function (res) {\n            alert(res.error.fieldErrors[0].message);\n        });\n        this.damageModal.hide();\n    };\n    BatchmgntComponent.prototype.createShadeArea = function (value) {\n        var _this = this;\n        // this.shadeArea = value;\n        // console.log(value);\n        this.shadeArea.batchId = value.id;\n        this.shadeArea.noOfSeedlings = value.noOfSeedlings;\n        this.shadeArea.date = moment(value.date, shared_1.DATE_TIME_FORMAT);\n        // console.log(this.shadeArea);\n        this.shadeAreaService.create(this.shadeArea)\n            .subscribe(function (data) {\n            alert('Successfully Moved to Shade Area.');\n            _this.updateBatchValue = value;\n            // console.log(this.updateBatchValue);\n            // If batch round is more then 0 increase the count or set 1 for a variable\n            if (_this.updateBatchValue.round > 0) {\n                // console.log('>');\n                _this.updateBatchValue.round = _this.updateBatchValue.round + 1;\n            }\n            else {\n                // console.log('<');\n                _this.updateBatchValue.round = 1;\n            }\n            // console.log(this.updateBatchValue);\n            // Update the Batch model using service\n            _this.batchService.update(_this.updateBatchValue)\n                .subscribe(function (res) {\n                _this.getBatchList();\n            }, function (res) {\n                alert(res.error.fieldErrors[0].message);\n            });\n        }, function (res) {\n            alert(res.error.fieldErrors[0].message);\n        });\n        this.shiftBatchModal.hide();\n    };\n    // Get the damage value based on batch id\n    BatchmgntComponent.prototype.getParticularBatchDamage = function (batchId) {\n        var _this = this;\n        this.damageRecordModal.show();\n        // Get the list of damage\n        this.damageService.getParticularBatchRecord(batchId).subscribe(function (res) {\n            _this.damages = res.body;\n        });\n    };\n    // Get the shadeArea value based on batch id\n    BatchmgntComponent.prototype.getParticularBatchShadeArea = function (batchId) {\n        var _this = this;\n        this.shadeAreaRecordModal.show();\n        // Get the list of shade area record\n        this.shadeAreaService.getParticularBatchRecord(batchId).subscribe(function (res) {\n            _this.shadeAreas = res.body;\n        });\n    };\n    Object.defineProperty(BatchmgntComponent.prototype, \"batchModel\", {\n        set: function (batch) {\n            this.createdAt = moment(this.batch.createdAt).format(shared_1.DATE_TIME_FORMAT);\n            this.updatedAt = moment(this.batch.updatedAt).format(shared_1.DATE_TIME_FORMAT);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    tslib_1.__decorate([\n        core_1.ViewChild('closeBatchModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof modal_1.ModalDirective !== \"undefined\" && modal_1.ModalDirective) === \"function\" && _a || Object)\n    ], BatchmgntComponent.prototype, \"closeBatchModal\", void 0);\n    tslib_1.__decorate([\n        core_1.ViewChild('damageModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_b = typeof modal_1.ModalDirective !== \"undefined\" && modal_1.ModalDirective) === \"function\" && _b || Object)\n    ], BatchmgntComponent.prototype, \"damageModal\", void 0);\n    tslib_1.__decorate([\n        core_1.ViewChild('shiftBatchModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_c = typeof modal_1.ModalDirective !== \"undefined\" && modal_1.ModalDirective) === \"function\" && _c || Object)\n    ], BatchmgntComponent.prototype, \"shiftBatchModal\", void 0);\n    tslib_1.__decorate([\n        core_1.ViewChild('shadeAreaRecordModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_d = typeof modal_1.ModalDirective !== \"undefined\" && modal_1.ModalDirective) === \"function\" && _d || Object)\n    ], BatchmgntComponent.prototype, \"shadeAreaRecordModal\", void 0);\n    tslib_1.__decorate([\n        core_1.ViewChild('damageRecordModal'),\n        tslib_1.__metadata(\"design:type\", typeof (_e = typeof modal_1.ModalDirective !== \"undefined\" && modal_1.ModalDirective) === \"function\" && _e || Object)\n    ], BatchmgntComponent.prototype, \"damageRecordModal\", void 0);\n    BatchmgntComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'jhi-batchmgnt',\n            templateUrl: 'batchmgnt.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_f = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" && _f || Object, typeof (_g = typeof zonal_service_1.ZonalService !== \"undefined\" && zonal_service_1.ZonalService) === \"function\" && _g || Object, typeof (_h = typeof sector_service_1.SectorService !== \"undefined\" && sector_service_1.SectorService) === \"function\" && _h || Object, typeof (_j = typeof nursery_service_1.NurseryService !== \"undefined\" && nursery_service_1.NurseryService) === \"function\" && _j || Object, typeof (_k = typeof pick_list_service_1.PickListService !== \"undefined\" && pick_list_service_1.PickListService) === \"function\" && _k || Object, typeof (_l = typeof pick_list_value_service_1.PickListValueService !== \"undefined\" && pick_list_value_service_1.PickListValueService) === \"function\" && _l || Object, typeof (_m = typeof batch_service_1.BatchService !== \"undefined\" && batch_service_1.BatchService) === \"function\" && _m || Object, typeof (_o = typeof damage_service_1.DamageService !== \"undefined\" && damage_service_1.DamageService) === \"function\" && _o || Object, typeof (_p = typeof shade_area_service_1.ShadeAreaService !== \"undefined\" && shade_area_service_1.ShadeAreaService) === \"function\" && _p || Object])\n    ], BatchmgntComponent);\n    return BatchmgntComponent;\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n}());\nexports.BatchmgntComponent = BatchmgntComponent;\n",{"version":3,"file":"/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/batch-management/batchmgnt.component.ts","sourceRoot":"","sources":["/var/www/PGH/aug/projectGH/node_modules/angular-router-loader/src/index.js!/var/www/PGH/aug/projectGH/node_modules/tslint-loader/index.js!/var/www/PGH/aug/projectGH/src/main/webapp/app/entities/batch-management/batchmgnt.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, ViewChild, Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ModalDirective } from 'ngx-bootstrap/modal';\nimport { IZonal } from 'app/shared/model/zonal.model';\nimport { ISector } from 'app/shared/model/sector.model';\nimport { INursery } from 'app/shared/model/nursery.model';\nimport { IPickList } from 'app/shared/model/pick-list.model';\nimport { IPickListValue } from 'app/shared/model/pick-list-value.model';\nimport { IBatch, BatchModel } from 'app/shared/model/batch.model';\nimport { IShadeArea, ShadeAreaModel } from 'app/shared/model/shade-area.model';\nimport { IDamage, DamageModel, STATUS_SEEDS, STATUS_SEEDLING } from 'app/shared/model/damage.model';\nimport { ZonalService } from 'app/entities/service/zonal.service';\nimport { NurseryService } from 'app/entities/service/nursery.service';\nimport { BatchService } from 'app/entities/service/batch.service';\nimport { DamageService } from 'app/entities/service/damage.service';\nimport { PickListService } from 'app/entities/service/pick-list.service';\nimport { PickListValueService } from 'app/entities/service/pick-list-value.service';\nimport { ShadeAreaService } from 'app/entities/service/shade-area.service';\n\nimport * as moment from 'moment';\nimport { DATE_TIME_FORMAT, MONTHS } from 'app/shared';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { SectorService } from 'app/entities/service/sector.service';\n\n@Component({\n    selector: 'jhi-batchmgnt',\n    templateUrl: 'batchmgnt.component.html'\n})\nexport class BatchmgntComponent implements OnInit {\n    // Create object of each model for create form\n    batch: BatchModel = new BatchModel();\n    updateBatchValue: BatchModel = new BatchModel();\n    damage: DamageModel = new DamageModel();\n    shadeArea: ShadeAreaModel = new ShadeAreaModel();\n    createdAt: string;\n    updatedAt: string;\n    sowingDateDp: any;\n    closedDateDp: any;\n    dateDamageDp: any;\n    dateShadeAreaDp: any;\n    fromDate: any;\n    toDate: any;\n\n    // create empty array for each service\n    zonals: IZonal[];\n    sectors: ISector[];\n    nurserys: INursery[];\n    pickLists: IPickList[];\n    varietys: IPickListValue[];\n    categorys: IPickListValue[];\n    batchs: IBatch[];\n    shadeAreas: IShadeArea[];\n    damages: IDamage[];\n    months = MONTHS;\n\n    @ViewChild('closeBatchModal') public closeBatchModal: ModalDirective;\n    @ViewChild('damageModal') public damageModal: ModalDirective;\n    @ViewChild('shiftBatchModal') public shiftBatchModal: ModalDirective;\n    @ViewChild('shadeAreaRecordModal') public shadeAreaRecordModal: ModalDirective;\n    @ViewChild('damageRecordModal') public damageRecordModal: ModalDirective;\n\n    constructor(\n        private router: Router,\n        private zonalService: ZonalService,\n        private sectorService: SectorService,\n        private nurseryService: NurseryService,\n        private pickListService: PickListService,\n        private pickListValueService: PickListValueService,\n        private batchService: BatchService,\n        private damageService: DamageService,\n        private shadeAreaService: ShadeAreaService\n    ) {}\n\n    ngOnInit() {\n        // console.log(\"Inside Batch Component\");\n        // Get the list of zone\n        this.zonalService.query().subscribe((res: HttpResponse<IZonal[]>) => {\n            this.zonals = res.body;\n        });\n\n        // Get the list of picklist\n        this.pickListService.query().subscribe((res: HttpResponse<IPickList[]>) => {\n            this.pickLists = res.body;\n        });\n\n        // Get the list of batch\n        this.getBatchList();\n    }\n\n    getBatchList(): void {\n        // Get the list of batch\n        this.batchService.query().subscribe((res: HttpResponse<IBatch[]>) => {\n            this.batchs = res.body;\n        });\n    }\n\n    getShadeAreaList(): void {\n        // console.log('Indide getShadeAreaList');\n        // Get the list of shade area\n        this.shadeAreaService.query().subscribe((res: HttpResponse<IPickList[]>) => {\n            this.shadeAreas = res.body;\n        });\n    }\n\n    getDamageList(): void {\n        // console.log('Indide getDamageList');\n        // Get the list of damage\n        this.damageService.query().subscribe((res: HttpResponse<IPickList[]>) => {\n            this.damages = res.body;\n        });\n    }\n\n    // Get the sector value based on zonal id\n    getSector(zoneId): void {\n        // console.log(zoneId);\n        // Get the list of sector\n        this.sectorService.getSectors(zoneId).subscribe((res: HttpResponse<ISector[]>) => {\n            // console.log(res.body);\n            this.sectors = res.body;\n        });\n    }\n\n    getNursery(sectorId): void {\n        // this.nurseryService.getSectorNursery(sectorId)\n        // .subscribe( data => {\n        //   this.sectorNurserys = data;\n        // });\n        // Get the list of nursery\n        this.nurseryService.getNurserys(sectorId).subscribe((res: HttpResponse<INursery[]>) => {\n            // console.log(res.body);\n            this.nurserys = res.body;\n        });\n    }\n\n    getVariety(id): void {\n        this.pickListValueService.getVariety(id).subscribe((res: HttpResponse<IPickListValue[]>) => {\n            // console.log(res.body);\n            this.varietys = res.body;\n        });\n        // this.pickListValueService.getParentList(id)\n        // .subscribe( data => {\n        //   this.variety = data;\n        // });\n    }\n\n    getCategory(id): void {\n        this.pickListValueService.getCategory(id).subscribe((res: HttpResponse<IPickListValue[]>) => {\n            // console.log(res.body);\n            this.categorys = res.body;\n        });\n        // this.pickListValueService.getChildList(id)\n        // .subscribe( data => {\n        //   this.categorys = data;\n        // });\n    }\n\n    // Create new Batch\n    save() {\n        // console.log(this.batch);\n        this.batch.createdAt = moment(this.createdAt, DATE_TIME_FORMAT);\n        this.batch.updatedAt = moment(this.updatedAt, DATE_TIME_FORMAT);\n        this.batch.sowingDate = moment(this.batch.sowingDate, DATE_TIME_FORMAT);\n        // console.log(this.batch);\n        this.subscribeToSaveResponse(this.batchService.create(this.batch));\n    }\n\n    private subscribeToSaveResponse(result: Observable<HttpResponse<IBatch>>) {\n        result.subscribe(\n            (res: HttpResponse<IBatch>) => {\n                this.batch = new BatchModel();\n                alert('Batch Created Successfully.');\n                this.getBatchList();\n            },\n            (res: HttpErrorResponse) => {\n                // alert('Batch Not Saved.');\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n    }\n\n    // Delete the batch\n    deleteBatch(batch: BatchModel): void {\n        this.batchService.delete(batch.id).subscribe(data => {\n            this.batchs = this.batchs.filter(u => u !== batch);\n            alert('Successfully Deleted.');\n        });\n    }\n\n    // show model popup to close the batch\n    updateBatch(value: BatchModel): void {\n        this.updateBatchValue = new BatchModel();\n        this.closeBatchModal.show();\n        this.updateBatchValue = value;\n    }\n\n    // show model popup to close the batch\n    updateDamage(value: BatchModel): void {\n        this.updateBatchValue = new BatchModel();\n        // console.log(value);\n        this.damageModal.show();\n        this.updateBatchValue = value;\n        this.updateBatchValue.status = STATUS_SEEDS;\n    }\n\n    // show model popup to close the batch\n    updateShift(value: BatchModel): void {\n        this.updateBatchValue = new BatchModel();\n        // console.log(value);\n        this.shiftBatchModal.show();\n        this.updateBatchValue = value;\n    }\n\n    // show model popup to close the batch\n    updateSeedlingDamage(value: ShadeAreaModel): void {\n        this.updateBatchValue = new BatchModel();\n        // console.log(value);\n        this.updateBatchValue.id = value.batchId;\n        this.updateBatchValue.status = STATUS_SEEDLING;\n        this.damageModal.show();\n    }\n\n    closeBatch(batch: BatchModel): void {\n        this.batch = batch;\n        this.batch.status = -1;\n        this.batch.closedDate = moment(this.batch.closedDate, DATE_TIME_FORMAT);\n        this.batchService.update(this.batch)\n        .subscribe(\n            data => {\n                alert('Bacth Closed Successfully.');\n            },\n            (res: HttpErrorResponse) => {\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n        this.closeBatchModal.hide();\n    }\n\n    createDamage(value: DamageModel): void {\n        // this.damage = value;\n        console.log(value);\n        this.damage.batchId = value.id;\n        this.damage.noOfQuantity = value.noOfQuantity;\n        this.damage.date = moment(value.date, DATE_TIME_FORMAT);\n        this.damage.description = value.description;\n        this.damage.status = value.status;\n        // console.log(this.damage);\n        this.damageService.create(this.damage)\n        .subscribe(data => {\n                alert('Damage Created Successfully.');\n                this.getBatchList();\n            },\n            (res: HttpErrorResponse) => {\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n        this.damageModal.hide();\n    }\n\n    createShadeArea(value: ShadeAreaModel): void {\n        // this.shadeArea = value;\n        // console.log(value);\n        this.shadeArea.batchId = value.id;\n        this.shadeArea.noOfSeedlings = value.noOfSeedlings;\n        this.shadeArea.date = moment(value.date, DATE_TIME_FORMAT);\n        // console.log(this.shadeArea);\n        this.shadeAreaService.create(this.shadeArea)\n        .subscribe(data => {\n                alert('Successfully Moved to Shade Area.');\n                this.updateBatchValue = value;\n                // console.log(this.updateBatchValue);\n                // If batch round is more then 0 increase the count or set 1 for a variable\n                if (this.updateBatchValue.round > 0) {\n                    // console.log('>');\n                    this.updateBatchValue.round = this.updateBatchValue.round + 1;\n                } else {\n                    // console.log('<');\n                    this.updateBatchValue.round = 1;\n                }\n                // console.log(this.updateBatchValue);\n                // Update the Batch model using service\n                this.batchService.update(this.updateBatchValue)\n                .subscribe(res => {\n                        this.getBatchList();\n                    },\n                    (res: HttpErrorResponse) => {\n                        alert(res.error.fieldErrors[0].message);\n                    }\n                );\n            },\n            (res: HttpErrorResponse) => {\n                alert(res.error.fieldErrors[0].message);\n            }\n        );\n        this.shiftBatchModal.hide();\n    }\n\n    // Get the damage value based on batch id\n    getParticularBatchDamage(batchId): void {\n        this.damageRecordModal.show();\n        // Get the list of damage\n        this.damageService.getParticularBatchRecord(batchId).subscribe((res: HttpResponse<IDamage[]>) => {\n            this.damages = res.body;\n        });\n    }\n\n    // Get the shadeArea value based on batch id\n    getParticularBatchShadeArea(batchId): void {\n        this.shadeAreaRecordModal.show();\n        // Get the list of shade area record\n        this.shadeAreaService.getParticularBatchRecord(batchId).subscribe((res: HttpResponse<IDamage[]>) => {\n            this.shadeAreas = res.body;\n        });\n    }\n\n    set batchModel(batch: IBatch) {\n        this.createdAt = moment(this.batch.createdAt).format(DATE_TIME_FORMAT);\n        this.updatedAt = moment(this.batch.updatedAt).format(DATE_TIME_FORMAT);\n    }\n}\n"]}]}